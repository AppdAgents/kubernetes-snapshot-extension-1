apiVersion: v1
data:
  config.yml: |+
    # Number of Threads for the Extension
    numberOfThreads: 38 # 12 tasks x 3 sub tasks + 2 extra

    metricPrefix: "Server|Component:{{ .Values.extensionConfig.appTierName | default "ClusterAgent"}}|Custom Metrics|Cluster Stats|"

    appName: '{{ .Values.extensionConfig.appName }}' # APPLICATION_NAME env var
    appTierName: '{{ .Values.extensionConfig.appTierName | default "ClusterAgent"}}'  # WARNING: if you change this value, update it in the metricPrefix setting above and the TIER_NAME in ma-config.yaml

    # Path to your kubectl Client configuration
    kubeClientConfig: {{ .Values.extensionConfig.kubeClientConfig }}

    #server or cluster
    apiMode: '{{ .Values.extensionConfig.apiMode | default "cluster"}}'  #K8S_API_MODE env var

    # Events API Key obtained from AppDynamics --> Analytics --> Configuration API Keys --> Add
    # The API Key you create needs to be able to Manage and Publish Custom Analytics Events
    eventsApiKey: '{{ .Values.controllerInfo.eventsApiKey }}'  # EVENT_ACCESS_KEY env var

    # Global Account Name obtained from
    # AppDynamics --> Settings --> License --> Accounts --> Global Account Name
    accountName: '{{ required "Appdynamics global account name is required!" .Values.controllerInfo.globalAccount }}'  # GLOBAL_ACCOUNT_NAME env var

    podsSchemaName: "k8s_pod_snapshots"

    nodeSchemaName: "k8s_node_snapshots"

    eventsSchemaName: "k8s_events"

    deploySchemaName: "k8s_deploy_snapshots"

    daemonSchemaName: "k8s_daemon_snapshots"

    rsSchemaName: "k8s_rs_snapshots"

    endpointSchemaName: "k8s_endpoint_snapshots"
    
    podResourceQuotaSchemaName: "k8s_pod_resource_quota_snapshots"
    
    namespaceQuotaUtilizationSchemaName: "k8s_namespace_resource_quota_utilization_snapshots"
    
    podStatusMonitorSchemaName: "k8s_pod_status_monitor_snapshots"
    
    notRunningPodCountPerNodeSchemaName: "k8s_not_running_pod_count_per_node_snapshots"
    
    podsCrashStatusSchemaName: "k8s_pod_crash_status_snapshots"
    
    podsMetricsSchemaName: "k8s_pod_metrics_snapshots"

    batchSize: "100"

    proxyHost: ""
    proxyPort: ""
    proxyUser: ""
    proxyPass: ""

    customTags: {{ .Values.extensionConfig.customTags | default "hall,enviornment"}}  #Add comma seperated tags/lables which needs to captured these will captured from resource metadata

    entities:
    - type: "pod"
    - type: "node"
    - type: "deployment"
    - type: "daemon"
    - type: "replica"
    - type: "event"
    - type: "endpoint"
    - type: "podResourceQuota"
    - type: "podStatusMonitor" 
    - type: "podCrashStatus"
    - type: "namespaceQuotaUtilization"
    - type: "notRunningPodsPerNode"
    - type: "podMetrics"

    # list of nodes to collect metrics for. If all nodes need to be monitored, set name to "all"
    nodes:
    - name: "all"
    #- name:

    # list of namespaces to collect metrics for. If all namespaces need to be monitored, set name to "all"
    namespaces:
    - name: "all"
    #- name:

    # Absolute path to the dashboard template.
    dashboardTemplatePath: "/opt/appdynamics/MachineAgent/monitors/KubernetesSnapshotExtension/templates/k8s_dashboard_template.json"

    # Absolute path to the node widget template.
    nodeTemplatePath: "templates/k8s_node_template.json"

    #Suffix appended to the generated dashboard name
    dashboardNameSuffix:  {{ .Values.extensionConfig.dashboardNameSuffix | default "SUMMARY"}}

    # REST API user credentials. The use should have rights to create dashboards and analytics searches.
    # Format: <username>@<accountname>:<password>
    controllerAPIUser:  '{{ required "Appdynamics controller API User is required!" .Values.controllerInfo.controllerAPIUser }}'    # REST_API_CREDENTIALS env var

    # Controller url, including the protocol
    controllerUrl: '{{ required "Appdynamics controller API User name is required!" .Values.controllerInfo.controllerURL }}' # REST_API_URL env var

    #Time in seconds between the checks if the default dashboard exists
    dashboardCheckInterval: "600"

    # Events Service Endpoint. These Default settings are for SaaS Users. Change if you are on Premise
    eventsUrl: {{ .Values.controllerInfo.eventsApiURL | default "https://analytics.api.appdynamics.com"}}  # EVENTS_API_URL env var


    podsSchemaDefinition: '{
       "schema" : {
          "object_uid": "string",
          "customLabels": "string",
          "clusterName": "string",
          "deploymentName": "string",
          "creationTimestamp": "date",
          "deletionTimestamp": "date",
          "labels": "string",
          "podName": "string",
          "annotations": "string",
          "name": "string",
          "namespace": "string",
          "containerCount": "integer",
          "initContainerCount": "integer",
          "nodeName": "string",
          "priority": "integer",
          "restartPolicy": "string",
          "serviceAccountName": "string",
          "terminationGracePeriodSeconds": "integer",
          "tolerations": "string",
          "nodeAffinityPreferred": "string",
          "nodeAffinityRequired": "string",
          "hasPodAffinity": "boolean",
          "hasPodAntiAffinity": "boolean",
          "hostIP": "string",
          "phase": "string",
          "podIP": "string",
          "reason": "string",
          "startTime": "date",
          "lastTransitionTimeCondition": "date",
          "reasonCondition": "string",
          "statusCondition": "string",
          "typeCondition": "string",
          "limitsDefined": "boolean",
          "liveProbes": "integer",
          "readyProbes": "integer",
          "podRestarts": "integer",
          "numPrivileged": "integer",
          "ports": "string",
          "memRequest": "float",
          "cpuRequest": "float",
          "cpuLimit": "float",
          "memLimit": "float",
          "containerStates": "string",
          "images": "string",
          "waitReasons": "string",
          "termReasons": "string",
          "runningStartTime": "date",
          "terminationTime": "date",
          "mounts": "string"
       }
    }'

    nodeSchemaDefinition: '{
      "schema" : {
          "nodeName": "string",
          "customLabels": "string",
          "clusterName": "string",
          "podCIDR": "string",
          "taints": "string",
          "phase": "string",
          "addresses": "string",
          "labels": "string",
          "role": "string",
          "cpuCapacity": "float",
          "memCapacity": "float",
          "podCapacity": "integer",
          "cpuAllocations": "float",
          "memAllocations": "float",
          "podAllocations": "integer",
          "kubeletPort": "integer",
          "osArch": "string",
          "kubeletVersion": "string",
          "runtimeVersion": "string",
          "machineID": "string",
          "osName": "string",
          "attachedVolumes": "string",
          "volumesInUse": "string",
          "ready": "string",
          "outOfDisk": "string",
          "memoryPressure": "string",
          "diskPressure": "string",
          "notRunningPodCount":"integer"
      }
    }'

    eventsSchemaDefinition: '{
       "schema" : {
          "firstTimestamp": "date",
          "customLabels": "string",
          "object_kind": "string",
          "object_name": "string",
          "object_namespace": "string",
          "object_resourceVersion": "string",
          "object_uid": "string",
          "lastTimestamp": "date",
          "message": "string",
          "annotations": "string",
          "clusterName": "string",
          "creationTimestamp": "date",
          "deletionTimestamp": "date",
          "finalizers": "string",
          "generateName": "string",
          "generation": "string",
          "initializers": "string",
          "labels": "string",
          "name": "string",
          "namespace": "string",
          "ownerReferences": "string",
          "resourceVersion": "string",
          "selfLink": "string",
          "type": "string",
          "count": "string",
          "source_component": "string",
          "source_host": "string",
          "reason": "string"
       }
    }'


    deploySchemaDefinition: '{
      "schema": {
        "clusterName": "string",
        "name": "string",
        "customLabels": "string",
        "namespace": "string",
        "object_uid": "string",
        "creationTimestamp": "date",
        "deletionTimestamp": "date",
        "labels": "string",
        "annotations": "string",
        "minReadySecs": "integer",
        "progressDeadlineSecs": "integer",
        "replicas": "integer",
        "revisionHistoryLimits": "integer",
        "strategy": "string",
        "maxSurge": "string",
        "maxUnavailable": "string",
        "replicasAvailable": "integer",
        "replicasUnAvailable": "integer",
        "replicasUpdated": "integer",
        "collisionCount": "integer",
        "replicasReady": "integer"
      }
    }'

    daemonSchemaDefinition: '{
      "schema": {
        "clusterName": "string",
        "name": "string",
        "customLabels": "string",
        "namespace": "string",
        "object_uid": "string",
        "creationTimestamp": "date",
        "deletionTimestamp": "date",
        "minReadySecs": "integer",
        "revisionHistoryLimits": "integer",
        "replicasAvailable": "integer",
        "replicasUnAvailable": "integer",
        "collisionCount": "integer",
        "replicasReady": "integer",
        "numberScheduled": "integer",
        "desiredNumber": "integer",
        "missScheduled": "integer",
        "updatedNumberScheduled": "integer"
      }
    }'


    rsSchemaDefinition: '{
      "schema": {
        "clusterName": "string",
        "name": "string",
        "namespace": "string",
        "customLabels": "string",
        "object_uid": "string",
        "creationTimestamp": "date",
        "deletionTimestamp": "date",
        "minReadySecs": "integer",
        "replicas": "integer",
        "rsReplicasAvailable": "integer",
        "rsReplicasUnAvailable": "integer",
        "replicasLabeled": "integer",
        "replicasReady": "integer"
      }
    }'

    endpointSchemaDefinition: '{
      "schema": {
        "name": "string",
        "clusterName": "string",
        "namespace": "string",
        "object_uid": "string",
        "creationTimestamp": "date",
        "deletionTimestamp": "date",
        "ip_up": "integer",
        "ip_down": "integer",
        "downContext": "string"
      }
    }'
    
    podResourceQuotaSchemaDefinition: '{
      "schema": {
        "clusterName": "string",
        "nodeName": "string",
        "customLabels": "string",
        "msServiceName": "string",
        "podCount": "integer",
        "cpuRequest": "float",
    	"cpuLimit": "float",
    	"memoryRequests": "float",
    	"memoryLimits": "float"
      }
    }'
    
    namespaceQuotaUtilizationSchemaDefinition: '{
       "schema": {
         "namespace": "string",
         "clusterName": "string",
         "customLabels": "string",
         "cpuRequestUsed": "float",
         "cpuRequestTotal": "float",
         "cpuLimitsUsed": "float",
         "cpuLimitsTotal": "float",
         "memoryRequestUsed": "float",
         "memoryRequestTotal": "float",
         "memoryLimitsUsed": "float",
         "memoryLimitsTotal": "float"
      }
    }'
    
    podStatusMonitorSchemaDefinition: '{
       "schema": {
         "clusterName": "string",
         "customLabels": "string",
         "nodeName": "string",
         "namespace": "string",
         "containerName": "string",
         "deploymentName": "string",
         "podName": "string",
         "errorReason": "string",
         "containerPhase": "string",
         "restartCount": "integer"
      }
    }'
    
    notRunningPodCountPerNodeSchemaDefinition: '{
       "schema": {
          "clusterName": "string",
          "customLabels": "string",
          "nodeName": "string",
          "containerStatus": "string",
          "notRunningPodCount": "integer",
          "labels": "string"
        }
     }'
     
    podsCrashStatusSchemaDefinition: '{
      "schema": {
         "clusterName": "string",
         "customLabels": "string",
         "nodeName": "string",
         "namespace": "string",
         "deploymentName": "string",
         "containers": "string",
         "podName": "string",
         "errorReason": "string",
         "containerPhase": "string",
         "crashCount": "integer",
         "restartCount": "integer"
        }
      }'

    podsMetricsSchemaDefinition: '{
      "schema": {
         "clusterName": "string",
         "customLabels": "string",
         "nodeName": "string",
         "namespace": "string",
         "containers": "string",
         "podName": "string",
         "errorReason": "string",
         "containerPhase": "string",
         "crashCount": "integer",
         "restartCount": "integer"
         "cpuRequestUsed": "float",
         "cpuRequestTotal": "float",
         "cpuLimitsUsed": "float",
         "cpuLimitsTotal": "float",
         "memoryRequestUsed": "float",
         "memoryRequestTotal": "float",
         "memoryLimitsUsed": "float",
         "memoryLimitsTotal": "float"
        }
      }'
kind: ConfigMap
metadata:
  name: {{ .Values.k8sExtConfigMapName }}
  namespace: {{.Release.Namespace}}
